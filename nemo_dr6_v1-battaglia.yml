# Nemo config file
# YAML format 
# - use null to return None in Python
# - note that YAML is fussy about large numbers: use e.g. 1.0e+14 for M500MSun (not 1e14)

# Valid units are uK or Jy/sr
# this should be a list of maps at different frequencies
# NOTE: surveyMask is optional
unfilteredMaps:
#    - {mapFileName: "maps/tsz_0145_res-0.5_beamfwhm-1.4_wnoise-17.0_wcmb1999.fits",
#       weightsFileName: "maps/ivar_res-0.5_wnoise-17.0.fits",
#       obsFreqGHz: 145., units: 'uK',
#       beamFileName: "beam_file_2.2-arcmin.txt"}
#    - {mapFileName: "maps/tsz_0093_res-0.5_beamfwhm-2.2_wnoise-17.0_wcmb1999.fits",
#       weightsFileName: "maps/ivar_res-0.5_wnoise-17.0.fits",
#       obsFreqGHz: 93., units: 'uK',
#       beamFileName: "beam_file_1.4-arcmin.txt"}

unfilteredMaps:
    - {mapFileName: "/global/cscratch1/sd/maccrann/cmb/websky/websky_outputs/tsz_wnoise-17muK/prep_map/cmb_orig/sky_map_0145.fits",
       weightsFileName: "/global/cscratch1/sd/maccrann/cmb/websky/websky_outputs/tsz_wnoise-17muK/prep_map/cmb_orig/ivar_map_0145.fits",
       obsFreqGHz: 145., units: 'uK',
       beamFileName: "/global/cscratch1/sd/maccrann/cmb/websky/websky_outputs/tsz_wnoise-17muK/prep_map/cmb_orig/beam_file_1.4-arcmin.txt"}
    - {mapFileName: "/global/cscratch1/sd/maccrann/cmb/websky/websky_outputs/tsz_wnoise-17muK/prep_map/cmb_orig/sky_map_0093.fits",
       weightsFileName: "/global/cscratch1/sd/maccrann/cmb/websky/websky_outputs/tsz_wnoise-17muK/prep_map/cmb_orig/ivar_map_0093.fits",
       obsFreqGHz: 93., units: 'uK',
       beamFileName: "/global/cscratch1/sd/maccrann/cmb/websky/websky_outputs/tsz_wnoise-17muK/prep_map/cmb_orig/beam_file_2.2-arcmin.txt"}


# Masks
#surveyMask: 'surveyMask.fits'

# Instead of giving point source mask, can give catalog instead
maskPointSourcesFromCatalog: null
    
# Detection/catalog options
# Set useInterpolator; True for sub-pixel flux and SNR measurements
thresholdSigma: 4.0
minObjPix: 1
findCenterOfMass: True
useInterpolator: True
rejectBorder: 0
objIdent: 'SO-CL'
longNames: False
catalogCuts: ['SNR > 4.0']

# Photometry options
photFilter: 'Battaglia_M2e14_z0p4'

# Optionally override the GNFW parameters - if not present, Battaglia et al. (2010) parameters are used
# The example below is for the Planck Pressure Profile (PPP)
#GNFWParams: {P0: 6.41, c500: 1.81, gamma: 0.31, alpha: 1.33, beta: 4.13, tol: 1e-7, npts: 100}

# Mass measurement options - used by nemoMass and nemoSelFn scripts
# Writes out .fits file to nemoOutDir/nemoOutDir_M500.fits
# redshiftCatalog:  A .fits table containing name, RADeg, decDeg, redshift, redshiftErr columns
# forcedPhotometry: If True, calc mass based on extracted y0~ in 'photFilter' map at RADeg, decDeg as given in redshiftCatalog
#                   If False, cross match redshiftCatalog with optimal catalog made by nemo
# Q:                If 'H13', use fit to Q from results presented in H13
#                   If 'fit', use fit to (theta, Q) done by nemo for 'photFilter' kernel
# tenToA0, B0, Mpivot, sigma_int: Fixed scaling relation options (see H13 or ACTPol paper)
# rescaleFactor, rescaleFactorErr: For MCal masses, as in the ACTPol paper (i.e., just rescales M500 results by 1/rescaleFactor)
# NOTE: These parameters reproduce the websky sim scaling relation (well, no idea on scatter)
massOptions: {tenToA0: 2.65e-05,
              B0: 0.0,
              Mpivot: 3.0e+14, 
              sigma_int: 0.2,
              H0: 68.0,
              Om0: 0.31,
              Ob0: 0.049,
              sigma8: 0.81,
              ns: 0.965,
              relativisticCorrection: True,
              rescaleFactor: 1.00,
              rescaleFactorErr: 0.01,
              redshiftCatalog: "redshifts.fits"}

# Selection function options
# NOTE: could eventually add 'completenessFraction' to 'massLimitMaps', which is why that's a dictionary list
# Use selFnFootprints to calculate average completeness in given sky areas - e.g., overlap with optical surveys
calcSelFn: True
selFnOptions: {fixedSNRCut: 5.0, 
               massLimitMaps: [{z: 0.5}]}
               
#selFnFootprints: 
    #- {label: "HSC",
       #maskList: ["../AdvACT/HSCCheckAndSelFn/s18a_fdfc_CAR_contarea.fits.gz"]}
    #- {label: "KiDS",
       #maskList: ["../AdvACT/KiDSSelFn/mask_KiDSN.fits.gz", "../AdvACT/KiDSSelFn/mask_KiDSS.fits.gz"]}
    #- {label: "DES",
       #maskList: ["../AdvACT/DESY3/AdvACT_y3a2_footprint_griz_1exp_v2.0.fits"]}
    #- {label: "DESI",
       #maskList: ["../AdvACT/DESI/footprint_healpix_CAR.fits.gz"]}
    
# Filter definitions:
# allFilters is a dictionary of parameters that will be copied into all mapFilters
# (these can be overridden by keys with the same name in mapFilters)
allFilters: {class: "BattagliaModelMatchedFilter",
             params: {noiseParams: {method: "dataMap",
                                    noiseGridArcmin: 40.},
                      outputUnits: 'yc',
                      edgeTrimArcmin: 0.0}
            }
                
# mapFilters is a list of all the different filters to apply
# (keys in mapFilters with the same name as those in allFilters take priority)
mapFilters:
    - {label: "Battaglia_M1e14_z0p2",
       params: {M500MSun: 1.0e+14, z: 0.2}}
    - {label: "Battaglia_M2e14_z0p2",
       params: {M500MSun: 2.0e+14, z: 0.2}}
    - {label: "Battaglia_M4e14_z0p2",
       params: {M500MSun: 4.0e+14, z: 0.2}}
    - {label: "Battaglia_M8e14_z0p2",
       params: {M500MSun: 8.0e+14, z: 0.2}}
    - {label: "Battaglia_M1e14_z0p4",
       params: {M500MSun: 1.0e+14, z: 0.4}}
    - {label: "Battaglia_M2e14_z0p4",
       params: {M500MSun: 2.0e+14, z: 0.4,
                saveFilteredMaps: True,
                savePlots: True}}
    - {label: "Battaglia_M4e14_z0p4",
       params: {M500MSun: 4.0e+14, z: 0.4}}
    - {label: "Battaglia_M8e14_z0p4",
       params: {M500MSun: 8.0e+14, z: 0.4}}              
    - {label: "Battaglia_M1e14_z0p8",
       params: {M500MSun: 1.0e+14, z: 0.8}}
    - {label: "Battaglia_M2e14_z0p8",
       params: {M500MSun: 2.0e+14, z: 0.8}}
    - {label: "Battaglia_M4e14_z0p8",
       params: {M500MSun: 4.0e+14, z: 0.8}}
    - {label: "Battaglia_M8e14_z0p8",
       params: {M500MSun: 8.0e+14, z: 0.8}}
    - {label: "Battaglia_M1e14_z1p2",
       params: {M500MSun: 1.0e+14, z: 1.2}}
    - {label: "Battaglia_M2e14_z1p2",
       params: {M500MSun: 2.0e+14, z: 1.2}}
    - {label: "Battaglia_M4e14_z1p2",
       params: {M500MSun: 4.0e+14, z: 1.2}}
    - {label: "Battaglia_M8e14_z1p2",
       params: {M500MSun: 8.0e+14, z: 1.2}}
    
# Set this to True to generate a sky sim (with noise), run all the filters over it, and measure contamination
# Set numSkySims to number required - we need to average over many as results vary a fair bit
estimateContaminationFromSkySim: False
numSkySims: 10

# Set this to True to estimate contamination by running cluster finder over inverted maps
# This is sensitive to how well point source masking is done
estimateContaminationFromInvertedMaps: False

# Run position recovery test
positionRecoveryTest: False
posRecIterations: 1
posRecSourcesPerTile: 100
posRecModels:
    - {'redshift': 0.8, 'M500': 2.0e+14}
    - {'redshift': 0.4, 'M500': 2.0e+14}
    - {'redshift': 0.2, 'M500': 2.0e+14}
    - {'redshift': 0.1, 'M500': 2.0e+14}
    
# tileDir options - cut-up each map into smaller sections
makeTileDir: True
makeQuickLookMaps: False
stitchTiles: False
tileOverlapDeg: 1.0
tileDefLabel: 'auto'
tileDefinitions: {#mask: 'surveyMask.fits',
                  targetTileWidthDeg: 10.0, 
                  targetTileHeightDeg: 5.0}